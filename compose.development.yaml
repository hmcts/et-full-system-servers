# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.5
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker --entryPoints.http.address=:3100 --entryPoints.traefik.address=:3200
    ports:
      - "3100:3100"
      # The Web UI (enabled by --api.insecure=true)
      - "3200:3200"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: wget --quiet --tries=1 --spider http://et.127.0.0.1.nip.io/3100 || exit 1
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 10s
    networks:
      et_full_system:
        aliases:
          - azure_blob_storage.et.127.0.0.1.nip.io
          - notify.et.127.0.0.1.nip.io
          - api.et.127.0.0.1.nip.io
          - admin.et.127.0.0.1.nip.io
          - et1.et.127.0.0.1.nip.io
          - et3.et.127.0.0.1.nip.io
          - azur.et.127.0.0.1.nip.io
          - atos.et.127.0.0.1.nip.io
          - ccd.et.127.0.0.1.nip.io
          - acas.et.127.0.0.1.nip.io

  et1-development:
    build:
      context: systems/et1
      dockerfile: Dockerfile.development
    command: /home/app/et1/bin/run_full_system
    volumes:
      - ./systems/et1/app:/home/app/et1/app:ro
      - ./systems/et1/bin:/home/app/et1/bin:ro
      - ./systems/et1/config:/home/app/et1/config:ro
      - ./systems/et1/lib:/home/app/et1/lib:ro
      - ./systems/et1/spec:/home/app/et1/spec:ro
      - ./systems/et1/vendor/assets:/home/app/et1/vendor/assets:ro
      - ./systems/et1/Gemfile:/home/app/et1/Gemfile:ro
      - ./systems/et1/Gemfile.lock:/home/app/et1/Gemfile.lock:ro
      - ./systems/et1/package.json:/home/app/et1/package.json:ro
      - ./systems/et1/yarn.lock:/home/app/et1/yarn.lock:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - systems/et1/.env.full_system.common
      - systems/et1/.env.full_system.development
    labels:
      - traefik.http.routers.et1-router.rule=Host(`et1.et.127.0.0.1.nip.io`)
      - traefik.http.routers.et1-router.service=et1-service
      - traefik.http.services.et1-service.loadbalancer.server.port=8080
    networks:
      - et_full_system
  et3-development:
    build:
      context: systems/et3
      dockerfile: Dockerfile.development
    command: /home/app/et3/bin/run_full_system
    volumes:
      - ./systems/et3/app:/home/app/et3/app:ro
      - ./systems/et3/bin:/home/app/et3/bin:ro
      - ./systems/et3/config:/home/app/et3/config:ro
      - ./systems/et3/lib:/home/app/et3/lib:ro
      - ./systems/et3/spec:/home/app/et3/spec:ro
      - ./systems/et3/Gemfile:/home/app/et3/Gemfile:ro
      - ./systems/et3/Gemfile.lock:/home/app/et3/Gemfile.lock:ro
      - ./systems/et3/package.json:/home/app/et3/package.json:ro
      - ./systems/et3/yarn.lock:/home/app/et3/yarn.lock:ro
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - systems/et3/.env.full_system.common
      - systems/et3/.env.full_system.development
    labels:
      - traefik.http.routers.et3-router.rule=Host(`et3.et.127.0.0.1.nip.io`)
      - traefik.http.routers.et3-router.service=et3-service
      - traefik.http.services.et3-service.loadbalancer.server.port=8080
    networks:
      - et_full_system
  api-development:
    build:
      context: systems/api
      dockerfile: Dockerfile.development
    command: /home/app/api/bin/run_full_system
    volumes:
      - ./systems/api/app:/home/app/api/app:ro
      - ./systems/api/bin:/home/app/api/bin:ro
      - ./systems/api/config:/home/app/api/config:ro
      - ./systems/api/lib:/home/app/api/lib:ro
      - ./systems/api/public:/home/app/api/public:ro
      - ./systems/api/spec:/home/app/api/spec:ro
      - ./systems/api/vendor/assets:/home/app/api/vendor/assets:ro
      - ./systems/api/vendor/gems:/home/app/api/vendor/gems:ro
      - ./systems/api/Gemfile:/home/app/api/Gemfile:ro
      - ./systems/api/Gemfile.lock:/home/app/api/Gemfile.lock:ro
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "-t", "1", "http://localhost:8080/ping.json"]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - systems/api/.env.full_system.common
      - systems/api/.env.full_system.development
    labels:
      - traefik.http.routers.api-router.rule=Host(`api.et.127.0.0.1.nip.io`)
      - traefik.http.routers.api-router.service=api-service
      - traefik.http.services.api-service.loadbalancer.server.port=8080
    networks:
      - et_full_system
  admin-development:
    build:
      context: systems/admin
      dockerfile: Dockerfile.development
    command: /home/app/admin/bin/run_full_system
    volumes:
      - ./systems/admin/app:/home/app/admin/app:ro
      - ./systems/admin/bin:/home/app/admin/bin:ro
      - ./systems/admin/config:/home/app/admin/config:ro
      - ./systems/admin/lib:/home/app/admin/lib:ro
      - admin-bundle:/home/app/admin/vendor/bundle:ro
      - ./systems/admin/Gemfile:/home/app/admin/Gemfile:ro
      - ./systems/admin/Gemfile.lock:/home/app/admin/Gemfile.lock:ro
      - ./systems/admin/package.json:/home/app/admin/package.json:ro
      - ./systems/admin/yarn.lock:/home/app/admin/yarn.lock:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      api-development:
        condition: service_healthy
    env_file:
      - systems/admin/.env.full_system.common
      - systems/admin/.env.full_system.development
    labels:
      - traefik.http.routers.admin-router.rule=Host(`admin.et.127.0.0.1.nip.io`)
      - traefik.http.routers.admin-router.service=admin-service
      - traefik.http.services.admin-service.loadbalancer.server.port=8080
    networks:
      - et_full_system
  et-ccd-export-development:
    build:
      context: systems/et_ccd_export
      dockerfile: Dockerfile.development
    command: /home/app/ccd-export/bin/run_full_system
    volumes:
      - ./systems/et_ccd_export/app:/home/app/ccd-export/app:ro
      - ./systems/et_ccd_export/bin:/home/app/ccd-export/bin:ro
      - ./systems/et_ccd_export/config:/home/app/ccd-export/config:ro
      - ./systems/et_ccd_export/lib:/home/app/ccd-export/lib:ro
      - ./systems/et_ccd_export/spec:/home/app/ccd-export/spec:ro
      - et-ccd-export-bundle:/home/app/ccd-export/vendor/bundle:ro
      - ./systems/et_ccd_export/Gemfile:/home/app/ccd-export/Gemfile:ro
      - ./systems/et_ccd_export/Gemfile.lock:/home/app/ccd-export/Gemfile.lock:ro
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - systems/et_ccd_export/.env.full_system.common
      - systems/et_ccd_export/.env.full_system.development
    networks:
      - et_full_system
  db:
    image: postgres:11
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    expose:
      - 5432
    ports:
      - "${DB_PORT-5432}:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - et_full_system
  redis:
    image: redis:4.0
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    networks:
      - et_full_system
    ports:
      - "${REDIS_PORT-6379}:6379"
  mailhog:
    image: mailhog/mailhog:v1.0.1
    labels:
      - traefik.http.routers.mail-router.rule=Host(`mail.et.127.0.0.1.nip.io`)
      - traefik.http.routers.mail-router.service=mail-service
      - traefik.http.services.mail-service.loadbalancer.server.port=8025
    environment:
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
    networks:
      - et_full_system
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    labels:
      - traefik.http.routers.azurite-router.rule=Host(`azure_blob_storage.et.127.0.0.1.nip.io`)
      - traefik.http.routers.azurite-router.service=azurite-service
      - traefik.http.services.azurite-service.loadbalancer.server.port=10000
    command: azurite-blob --blobHost 0.0.0.0 --disableProductStyleUrl -l /data
    volumes:
      - azure_storage_data:/data
    networks:
      - et_full_system
  fake-services:
    build:
      context: support/fake_services
      dockerfile: Dockerfile
    labels:
      - traefik.http.routers.acas-router.rule=Host(`acas.et.127.0.0.1.nip.io`)
      - traefik.http.routers.acas-router.service=acas-service
      - traefik.http.services.acas-service.loadbalancer.server.port=9000
      - traefik.http.routers.ccd-router.rule=Host(`ccd.et.127.0.0.1.nip.io`)
      - traefik.http.routers.ccd-router.service=ccd-service
      - traefik.http.services.ccd-service.loadbalancer.server.port=9100
      - traefik.http.routers.notify-router.rule=Host(`notify.et.127.0.0.1.nip.io`)
      - traefik.http.routers.notify-router.service=notify-service
      - traefik.http.services.notify-service.loadbalancer.server.port=9200
    environment:
      GOVUK_NOTIFY_API_KEY_LIVE: fake-key-7fc24bc8-1938-1827-bed3-fb237f9cd5e7-c34b3015-02a1-4e01-b922-1ea21f331d4d
      GOVUK_NOTIFY_CUSTOM_URL: http://notify.et.127.0.0.1.nip.io:3100
    networks:
      - et_full_system
volumes:
  db-data:
  azure_storage_data:
  admin-bundle:
  et-ccd-export-bundle:
networks:
  et_full_system:
