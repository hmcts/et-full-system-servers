version: "3.8"
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.5
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker --entryPoints.http.address=:3100 --entryPoints.traefik.address=:3200 --ping
    ports:
      - "3100:3100"
      # The Web UI (enabled by --api.insecure=true)
      - "3200:3200"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:3200/ping || exit 1
      interval: 5s
      timeout: 1s
      retries: 10
      start_period: 10s
    networks:
      et_full_system:
        aliases:
          - azure_blob_storage.et.127.0.0.1.nip.io
          - notify.et.127.0.0.1.nip.io
          - api.et.127.0.0.1.nip.io
          - admin.et.127.0.0.1.nip.io
          - et1.et.127.0.0.1.nip.io
          - et3.et.127.0.0.1.nip.io
          - azur.et.127.0.0.1.nip.io
          - atos.et.127.0.0.1.nip.io
          - ccd.et.127.0.0.1.nip.io
          - acas.et.127.0.0.1.nip.io

  et1:
    build:
      context: systems/et1
      dockerfile: Dockerfile
    command: /home/app/et1/bin/run_full_system
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "-t", "1", "http://localhost:8080/health"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - systems/et1/.env.full_system.common
      - systems/et1/.env.full_system.production
    labels:
      - traefik.http.routers.et1-router.rule=Host(`et1.et.127.0.0.1.nip.io`)
      - traefik.http.routers.et1-router.service=et1-service
      - traefik.http.services.et1-service.loadbalancer.server.port=8080
    networks:
      - et_full_system
  et3:
    build:
      context: systems/et3
      dockerfile: Dockerfile
    command: /home/app/et3/bin/run_full_system
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "-t", "1", "http://localhost:8080/health"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - systems/et3/.env.full_system.common
      - systems/et3/.env.full_system.production
    labels:
      - traefik.http.routers.et3-router.rule=Host(`et3.et.127.0.0.1.nip.io`)
      - traefik.http.routers.et3-router.service=et3-service
      - traefik.http.services.et3-service.loadbalancer.server.port=8080
    networks:
      - et_full_system
  api:
    build:
      context: systems/api
      dockerfile: Dockerfile
    command: /home/app/api/bin/run_full_system
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "-t", "1", "http://localhost:8080/health"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      azurite:
        condition: service_healthy
    env_file:
      - systems/api/.env.full_system.common
      - systems/api/.env.full_system.production
    labels:
      - traefik.http.routers.api-router.rule=Host(`api.et.127.0.0.1.nip.io`)
      - traefik.http.routers.api-router.service=api-service
      - traefik.http.services.api-service.loadbalancer.server.port=8080
    networks:
      - et_full_system
  admin:
    build:
      context: systems/admin
      dockerfile: Dockerfile
    command: /home/app/admin/bin/run_full_system
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "-t", "1", "http://localhost:8080/health"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    env_file:
      - systems/admin/.env.full_system.common
      - systems/admin/.env.full_system.production
    labels:
      - traefik.http.routers.admin-router.rule=Host(`admin.et.127.0.0.1.nip.io`)
      - traefik.http.routers.admin-router.service=admin-service
      - traefik.http.services.admin-service.loadbalancer.server.port=8080
    networks:
      - et_full_system
  et-ccd-export:
    build:
      context: systems/et_ccd_export
      dockerfile: Dockerfile
    command: /home/app/ccd-export/bin/run_full_system
    healthcheck:
      test: ["CMD", "bundle", "exec", "sidekiqmon", "processes"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 40s
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - systems/et_ccd_export/.env.full_system.common
      - systems/et_ccd_export/.env.full_system.production
    networks:
      - et_full_system
  db:
    image: postgres:11
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 2s
      retries: 15
    networks:
      - et_full_system
  redis:
    image: redis:4.0
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 2s
      retries: 10
    networks:
      - et_full_system
  mailhog:
    image: mailhog/mailhog:v1.0.1
    entrypoint: ["/bin/sh", "-c", "MailHog &>/dev/null"]
    healthcheck:
      test: nc 127.0.0.1 8025 -z
      interval: 10s
      timeout: 30s
      retries: 10
    labels:
      - traefik.http.routers.mail-router.rule=Host(`mail.et.127.0.0.1.nip.io`)
      - traefik.http.routers.mail-router.service=mail-service
      - traefik.http.services.mail-service.loadbalancer.server.port=8025
    environment:
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
    networks:
      - et_full_system
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    labels:
      - traefik.http.routers.azurite-router.rule=Host(`azure_blob_storage.et.127.0.0.1.nip.io`)
      - traefik.http.routers.azurite-router.service=azurite-service
      - traefik.http.services.azurite-service.loadbalancer.server.port=10000
    command: azurite-blob --blobHost 0.0.0.0 --disableProductStyleUrl -l /data
    healthcheck:
      test: nc 127.0.0.1 10000 -z
      interval: 2s
      retries: 20
    volumes:
      - azure_storage_data:/data
    networks:
      - et_full_system
  fake-services:
    build:
      context: support/fake_services
      dockerfile: Dockerfile
    healthcheck:
      test: nc 127.0.0.1 9000 -z && nc 127.0.0.1 9100 -z && nc 127.0.0.1 9200 -z
      interval: 2s
      retries: 20
    labels:
      - traefik.http.routers.acas-router.rule=Host(`acas.et.127.0.0.1.nip.io`)
      - traefik.http.routers.acas-router.service=acas-service
      - traefik.http.services.acas-service.loadbalancer.server.port=9000
      - traefik.http.routers.ccd-router.rule=Host(`ccd.et.127.0.0.1.nip.io`)
      - traefik.http.routers.ccd-router.service=ccd-service
      - traefik.http.services.ccd-service.loadbalancer.server.port=9100
      - traefik.http.routers.notify-router.rule=Host(`notify.et.127.0.0.1.nip.io`)
      - traefik.http.routers.notify-router.service=notify-service
      - traefik.http.services.notify-service.loadbalancer.server.port=9200
    environment:
      GOVUK_NOTIFY_API_KEY_LIVE: fake-key-7fc24bc8-1938-1827-bed3-fb237f9cd5e7-c34b3015-02a1-4e01-b922-1ea21f331d4d
      GOVUK_NOTIFY_CUSTOM_URL: http://notify.et.127.0.0.1.nip.io:3100
    networks:
      - et_full_system
  finished:
    image: bash
    depends_on:
      et1:
        condition: service_healthy
      et3:
        condition: service_healthy
      api:
        condition: service_healthy
      admin:
        condition: service_healthy
      et-ccd-export:
        condition: service_healthy
      mailhog:
        condition: service_healthy
      fake-services:
        condition: service_healthy
      azurite:
        condition: service_healthy
      traefik:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: -c "
      echo '******************************************************************' &&
      echo '*                                                                *' &&
      echo '*         All services are now ready for use                     *' &&
      echo '*                                                                *' &&
      echo '******************************************************************'
      "
    labels:
      - traefik.enabled=false
volumes:
  db-data:
  azure_storage_data:
networks:
  et_full_system:
